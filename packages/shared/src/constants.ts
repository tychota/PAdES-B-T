/**
 * Application constants
 */

// Signature algorithms
export const SIGNATURE_ALGORITHMS = {
  SHA256_WITH_RSA: "1.2.840.113549.1.1.11",
  SHA384_WITH_RSA: "1.2.840.113549.1.1.12",
  SHA512_WITH_RSA: "1.2.840.113549.1.1.13",
} as const;

// Hash algorithms
export const HASH_ALGORITHMS = {
  SHA256: "2.16.840.1.101.3.4.2.1",
  SHA384: "2.16.840.1.101.3.4.2.2",
  SHA512: "2.16.840.1.101.3.4.2.3",
} as const;

// CMS Object Identifiers
export const CMS_OIDS = {
  ID_DATA: "1.2.840.113549.1.7.1",
  ID_SIGNED_DATA: "1.2.840.113549.1.7.2",
  ID_CONTENT_TYPE: "1.2.840.113549.1.9.3",
  ID_MESSAGE_DIGEST: "1.2.840.113549.1.9.4",
  ID_SIGNING_TIME: "1.2.840.113549.1.9.5",
  ID_SIGNING_CERTIFICATE_V2: "1.2.840.113549.1.9.16.2.47",
  ID_SIGNATURE_TIMESTAMP_TOKEN: "1.2.840.113549.1.9.16.2.14",
} as const;

// PAdES constants
export const PADES_CONSTANTS = {
  SUBFILTER: "ETSI.CAdES.detached",
  FILTER: "Adobe.PPKLite",
  DEFAULT_PLACEHOLDER_SIZE: 32768, // bytes - larger for B-T with timestamp
  MIN_PLACEHOLDER_SIZE: 8192,
  MAX_PLACEHOLDER_SIZE: 65536,
} as const;

// Default configuration values
export const DEFAULT_CONFIG = {
  SIGNATURE_REASON: "ePrescription signature",
  SIGNATURE_LOCATION: "France",
  SIGNATURE_LEVEL: "B-T" as const,
  TIMESTAMP_URL: "https://freetsa.org/tsr",
  TIMESTAMP_HASH_ALG: "sha256",
  ICANOPEE_ENDPOINT: "https://localhost.icanopee.net:9982",
  ICANOPEE_TIMEOUT: 3600, // seconds
} as const;

// Error codes
export const ERROR_CODES = {
  // PDF errors
  PDF_INVALID: "PDF_INVALID",
  PDF_CORRUPTED: "PDF_CORRUPTED",
  PDF_ALREADY_SIGNED: "PDF_ALREADY_SIGNED",
  PDF_PLACEHOLDER_NOT_FOUND: "PDF_PLACEHOLDER_NOT_FOUND",
  PDF_BYTERANGE_INVALID: "PDF_BYTERANGE_INVALID",

  // Signature errors
  SIGNATURE_INVALID: "SIGNATURE_INVALID",
  CERTIFICATE_INVALID: "CERTIFICATE_INVALID",
  CERTIFICATE_EXPIRED: "CERTIFICATE_EXPIRED",
  SIGNATURE_VERIFICATION_FAILED: "SIGNATURE_VERIFICATION_FAILED",

  // CPS errors
  CPS_CARD_NOT_FOUND: "CPS_CARD_NOT_FOUND",
  CPS_WRONG_PIN: "CPS_WRONG_PIN",
  CPS_COMMUNICATION_ERROR: "CPS_COMMUNICATION_ERROR",

  // Icanopee errors
  ICANOPEE_CONNECTION_FAILED: "ICANOPEE_CONNECTION_FAILED",
  ICANOPEE_SESSION_EXPIRED: "ICANOPEE_SESSION_EXPIRED",
  ICANOPEE_API_ERROR: "ICANOPEE_API_ERROR",

  // Timestamp errors
  TIMESTAMP_REQUEST_FAILED: "TIMESTAMP_REQUEST_FAILED",
  TIMESTAMP_INVALID: "TIMESTAMP_INVALID",

  // General errors
  INTERNAL_ERROR: "INTERNAL_ERROR",
  INVALID_REQUEST: "INVALID_REQUEST",
  MISSING_PARAMETER: "MISSING_PARAMETER",
} as const;

export type ErrorCode = (typeof ERROR_CODES)[keyof typeof ERROR_CODES];
