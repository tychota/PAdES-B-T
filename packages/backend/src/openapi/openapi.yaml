openapi: 3.1.0
info:
  title: PAdES-B-T ePrescription POC API
  version: 1.0.0
  description: |
    PAdES-B-T compliant ePrescription Proof of Concept with CPS card integration.
    
    This API provides endpoints for:
    - PDF document preparation and signing
    - Certificate-based digital signatures with PAdES-B-T compliance
    - Mock HSM simulation for testing
    - PKCS#11 hardware token integration
    - PDF signature verification
    - Debug and diagnostic tools
    
    ## Signing Workflow
    
    The signing process follows a 3-step pattern:
    1. **Prepare** (`POST /api/pdf/prepare`) - Process PDF and generate message digest
    2. **Presign** (`POST /api/pdf/presign`) - Build signed attributes for external signing
    3. **Finalize** (`POST /api/pdf/finalize`) - Embed signature and create final signed PDF
    
  contact:
    name: PAdES POC Team
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3001/api
    description: Development server

paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check endpoint
      description: Returns the current status and configuration of the service
      operationId: getHealth
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseApiResponse'
                  - type: object
                    properties:
                      status:
                        type: string
                        enum: [OK, ERROR]
                        example: OK
                      timestamp:
                        type: string
                        format: date-time
                        example: '2024-01-15T10:30:45.123Z'
                      service:
                        type: string
                        example: 'PAdES-B-T Signature Service'
                      version:
                        type: string
                        example: '1.0.0'

  /pdf/generate:
    post:
      tags:
        - PDF Operations
      summary: Generate demo PDF
      description: Creates a demonstration PDF document for testing purposes
      operationId: generateDemoPdf
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                config:
                  $ref: '#/components/schemas/PDFSigningConfig'
              example:
                config:
                  signerName: "Dr. Jean Dupont"
                  location: "Paris, France"
                  reason: "ePrescription signature"
      responses:
        '200':
          description: PDF generated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseApiResponse'
                  - type: object
                    properties:
                      pdfBase64:
                        type: string
                        format: byte
                        description: Base64-encoded PDF document
        '500':
          description: PDF generation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /pdf/prepare:
    post:
      tags:
        - PDF Signing
      summary: Prepare PDF for signing (Step 1)
      description: |
        First step of the signing process. Processes the PDF document and creates 
        a prepared version with placeholder for signature, returning the message digest 
        that needs to be signed.
      operationId: preparePdf
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - pdfBase64
                - config
              properties:
                pdfBase64:
                  type: string
                  format: byte
                  description: Base64-encoded PDF document to be signed
                config:
                  $ref: '#/components/schemas/PDFSigningConfig'
      responses:
        '200':
          description: PDF prepared successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseApiResponse'
                  - type: object
                    required:
                      - preparedPdfBase64
                      - byteRange
                      - messageDigestB64
                    properties:
                      preparedPdfBase64:
                        type: string
                        format: byte
                        description: PDF with signature placeholder
                      byteRange:
                        $ref: '#/components/schemas/ByteRange'
                      messageDigestB64:
                        type: string
                        format: byte
                        description: Base64-encoded message digest to be signed
        '500':
          description: PDF preparation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /pdf/presign:
    post:
      tags:
        - PDF Signing
      summary: Build signed attributes (Step 2)
      description: |
        Second step of the signing process. Takes the message digest and builds 
        the signed attributes structure that will be signed by the external HSM or card.
      operationId: presignPdf
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - messageDigestB64
              properties:
                messageDigestB64:
                  type: string
                  format: byte
                  description: Base64-encoded message digest from prepare step
                signerCertPem:
                  type: string
                  description: PEM-encoded signer certificate (required for PAdES)
                  example: |
                    -----BEGIN CERTIFICATE-----
                    MIIEXjCCA0agAwIBAgIJAKZZZZZZZZZZMA0GCSqGSIb3DQEBCwUAMH0xCzAJBgNV
                    ...
                    -----END CERTIFICATE-----
                signingTime:
                  type: string
                  format: date-time
                  description: Optional signing time (defaults to current time)
      responses:
        '200':
          description: Signed attributes built successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseApiResponse'
                  - type: object
                    required:
                      - toBeSignedB64
                      - signedAttrsDerB64
                    properties:
                      toBeSignedB64:
                        type: string
                        format: byte
                        description: Data to be signed by external signer (same as signedAttrsDerB64)
                      signedAttrsDerB64:
                        type: string
                        format: byte
                        description: DER-encoded signed attributes structure
        '400':
          description: Missing required parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Presigning failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /pdf/finalize:
    post:
      tags:
        - PDF Signing
      summary: Finalize signed PDF (Step 3)
      description: |
        Final step of the signing process. Takes the prepared PDF, signed attributes, 
        and signature from external signer to create the final signed PDF with 
        embedded CMS signature structure.
      operationId: finalizePdf
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - preparedPdfBase64
                - byteRange
                - signedAttrsDerB64
                - signatureB64
                - signerCertPem
              properties:
                preparedPdfBase64:
                  type: string
                  format: byte
                  description: Prepared PDF from step 1
                byteRange:
                  $ref: '#/components/schemas/ByteRange'
                signedAttrsDerB64:
                  type: string
                  format: byte
                  description: Signed attributes from step 2
                signatureB64:
                  type: string
                  format: byte
                  description: Raw signature from external signer
                signerCertPem:
                  type: string
                  description: PEM-encoded signer certificate
                certificateChainPem:
                  type: array
                  items:
                    type: string
                  description: Optional intermediate certificates for chain building
                signatureAlgorithmOid:
                  type: string
                  description: Signature algorithm OID (defaults to SHA256withRSA)
                  example: "1.2.840.113549.1.1.11"
                withTimestamp:
                  type: boolean
                  description: Whether to request RFC 3161 timestamp (PAdES-B-T), defaults to true
                  default: true
      responses:
        '200':
          description: PDF finalized successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseApiResponse'
                  - type: object
                    required:
                      - signedPdfBase64
                    properties:
                      signedPdfBase64:
                        type: string
                        format: byte
                        description: Final signed PDF document
        '400':
          description: Missing required parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Finalization failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /pdf/verify:
    post:
      tags:
        - PDF Verification
      summary: Verify PDF signature
      description: |
        Verifies the cryptographic signature and PAdES compliance of a signed PDF document.
        Checks signature validity, certificate chain, and PAdES-B-T compliance.
      operationId: verifyPdf
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - pdfBase64
              properties:
                pdfBase64:
                  type: string
                  format: byte
                  description: Base64-encoded signed PDF to verify
      responses:
        '200':
          description: Verification completed
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseApiResponse'
                  - type: object
                    required:
                      - result
                    properties:
                      result:
                        $ref: '#/components/schemas/VerificationResult'
        '500':
          description: Verification failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /icanopee/dc-parameter:
    get:
      tags:
        - CPS Integration
      summary: Get DC parameter for Icanopee
      description: Returns the DC parameter needed for frontend Icanopee CPS card integration
      operationId: getDcParameter
      responses:
        '200':
          description: DC parameter retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseApiResponse'
                  - type: object
                    required:
                      - dcParameter
                    properties:
                      dcParameter:
                        type: string
                        description: DC parameter for Icanopee integration
        '500':
          description: DC parameter not configured or error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /mock/cert:
    get:
      tags:
        - Mock HSM
      summary: Get mock HSM certificate
      description: Returns the certificate from the mock HSM for testing purposes
      operationId: getMockCert
      responses:
        '200':
          description: Mock certificate retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseApiResponse'
                  - type: object
                    required:
                      - signerCertPem
                    properties:
                      signerCertPem:
                        type: string
                        description: PEM-encoded signer certificate
                      certificateChainPem:
                        type: string
                        description: PEM-encoded certificate chain
        '500':
          description: Mock HSM not initialized or error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /mock/sign:
    post:
      tags:
        - Mock HSM
      summary: Sign data with mock HSM
      description: Signs the provided data using the mock HSM for testing purposes
      operationId: mockSign
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - toBeSignedB64
              properties:
                toBeSignedB64:
                  type: string
                  format: byte
                  description: Base64-encoded data to be signed
      responses:
        '200':
          description: Data signed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseApiResponse'
                  - type: object
                    required:
                      - signatureB64
                      - signerCertPem
                      - signatureAlgorithmOid
                    properties:
                      signatureB64:
                        type: string
                        format: byte
                        description: Base64-encoded signature
                      signerCertPem:
                        type: string
                        description: PEM-encoded signer certificate
                      certificateChainPem:
                        type: string
                        description: PEM-encoded certificate chain
                      signatureAlgorithmOid:
                        type: string
                        description: Signature algorithm OID
                        example: "1.2.840.113549.1.1.11"
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: Signing failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /debug/pdf-objects:
    post:
      tags:
        - Debug
      summary: Dump PDF objects for debugging
      description: |
        Extracts and displays PDF objects for debugging purposes. 
        Marked as internal - not for production use.
      x-internal: true
      operationId: debugPdfObjects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - pdfBase64
              properties:
                pdfBase64:
                  type: string
                  format: byte
                  description: Base64-encoded PDF to analyze
                onlySignatureObjects:
                  type: boolean
                  description: Only return signature-related objects
                  default: false
                collapseStreams:
                  type: boolean
                  description: Collapse large stream objects
                  default: true
      responses:
        '200':
          description: PDF objects extracted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseApiResponse'
                  - type: object
                    required:
                      - objectsText
                    properties:
                      objectsText:
                        type: string
                        description: Formatted text of PDF objects
                      signatureObjectNumbers:
                        type: array
                        items:
                          type: integer
                        description: Object numbers containing signature dictionaries
        '400':
          description: PDF analysis failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /debug/cms:
    post:
      tags:
        - Debug
      summary: Parse CMS SignedData structure
      description: |
        Parses and displays CMS SignedData structure for debugging purposes.
        Marked as internal - not for production use.
      x-internal: true
      operationId: debugCms
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pdfBase64:
                  type: string
                  format: byte
                  description: Base64-encoded PDF (CMS will be extracted)
                cmsDerBase64:
                  type: string
                  format: byte
                  description: Base64-encoded CMS DER data (alternative to pdfBase64)
      responses:
        '200':
          description: CMS parsed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseApiResponse'
                  - type: object
                    required:
                      - summary
                    properties:
                      summary:
                        type: object
                        properties:
                          signedDataVersion:
                            type: integer
                          digestAlgorithms:
                            type: array
                            items:
                              type: string
                          eContentType:
                            type: string
                          certificateCount:
                            type: integer
                          signerSubject:
                            type: string
                          hasTimestamp:
                            type: boolean
                          signedAttributeOids:
                            type: array
                            items:
                              type: string
                      asn1:
                        type: object
                        description: Parsed ASN.1 structure
        '400':
          description: CMS parsing failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /pkcs11/slots:
    get:
      tags:
        - PKCS#11
      summary: Get available PKCS#11 slots
      description: Returns available PKCS#11 slots for hardware token access
      operationId: getPkcs11Slots
      responses:
        '200':
          description: Slots retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseApiResponse'
                  - type: object
                    required:
                      - slots
                    properties:
                      slots:
                        type: array
                        items:
                          $ref: '#/components/schemas/PKCS11Slot'
        '500':
          description: PKCS#11 operation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /pkcs11/certificates:
    post:
      tags:
        - PKCS#11
      summary: Get certificates from PKCS#11 slot
      description: Returns certificates available in the specified PKCS#11 slot
      operationId: getPkcs11Certificates
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - slotId
              properties:
                slotId:
                  type: integer
                  description: PKCS#11 slot ID
                pin:
                  type: string
                  description: PIN for slot access (if required)
      responses:
        '200':
          description: Certificates retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseApiResponse'
                  - type: object
                    required:
                      - certificates
                    properties:
                      certificates:
                        type: array
                        items:
                          $ref: '#/components/schemas/PKCS11Certificate'
        '500':
          description: PKCS#11 operation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /pkcs11/sign:
    post:
      tags:
        - PKCS#11
      summary: Sign data using PKCS#11
      description: Signs data using a certificate from a PKCS#11 token
      operationId: pkcs11Sign
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - slotId
                - pin
                - dataToSignB64
              properties:
                slotId:
                  type: integer
                  description: PKCS#11 slot ID
                pin:
                  type: string
                  description: PIN for slot access
                dataToSignB64:
                  type: string
                  format: byte
                  description: Base64-encoded data to sign (DER signedAttributes)
                certificateFilter:
                  type: object
                  properties:
                    label:
                      type: string
                    subject:
                      type: string
                  description: Filter to select specific certificate
      responses:
        '200':
          description: Data signed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BaseApiResponse'
                  - type: object
                    required:
                      - signatureB64
                      - signerCertPem
                      - signatureAlgorithmOid
                      - certificate
                    properties:
                      signatureB64:
                        type: string
                        format: byte
                        description: Base64-encoded signature
                      signerCertPem:
                        type: string
                        description: PEM-encoded signer certificate
                      signatureAlgorithmOid:
                        type: string
                        description: Signature algorithm OID
                      certificate:
                        $ref: '#/components/schemas/PKCS11Certificate'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '500':
          description: PKCS#11 signing failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

components:
  schemas:
    BaseApiResponse:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
          description: Whether the request was successful
        logs:
          type: array
          items:
            $ref: '#/components/schemas/LogEntry'
          description: Operation logs for debugging

    ApiError:
      allOf:
        - $ref: '#/components/schemas/BaseApiResponse'
        - type: object
          required:
            - error
          properties:
            success:
              type: boolean
              enum: [false]
            error:
              type: object
              required:
                - code
                - message
                - timestamp
              properties:
                code:
                  type: string
                  description: Error code
                  example: "PDF_PREPARATION_FAILED"
                message:
                  type: string
                  description: Human-readable error message
                  example: "Invalid PDF format"
                timestamp:
                  type: string
                  format: date-time
                  description: Error timestamp

    LogEntry:
      type: object
      required:
        - timestamp
        - level
        - category
        - message
      properties:
        timestamp:
          type: string
          format: date-time
        level:
          type: string
          enum: [debug, info, warning, error, success]
        category:
          type: string
          description: Log category (backend, mock-hsm, pkcs11, etc.)
        message:
          type: string
        workflowId:
          type: string
          description: Workflow identifier for tracking
        step:
          type: string
          description: Workflow step (prepare, presign, finalize, verify)
        metadata:
          type: object
          description: Additional log metadata

    PDFSigningConfig:
      type: object
      properties:
        signerName:
          type: string
          description: Name of the person signing
          example: "Dr. Jean Dupont"
        location:
          type: string
          description: Location where signing takes place
          example: "Paris, France"
        reason:
          type: string
          description: Reason for signing
          example: "ePrescription signature"
        contactInfo:
          type: string
          description: Contact information of signer
        signatureFieldName:
          type: string
          description: Name for the signature field
        pageNumber:
          type: integer
          description: Page number for signature placement (1-based)
          minimum: 1
        rectangle:
          type: array
          items:
            type: number
          minItems: 4
          maxItems: 4
          description: Signature field rectangle [x1, y1, x2, y2]

    ByteRange:
      type: array
      items:
        type: integer
      minItems: 4
      maxItems: 4
      description: PDF ByteRange array [start1, length1, start2, length2]
      example: [0, 1234, 3456, 789]

    VerificationResult:
      type: object
      required:
        - isCryptographicallyValid
        - isPAdESCompliant
        - isTimestamped
        - signatureLevel
        - reasons
      properties:
        isCryptographicallyValid:
          type: boolean
          description: Whether the signature is cryptographically valid
        isPAdESCompliant:
          type: boolean
          description: Whether the signature is PAdES compliant
        isTimestamped:
          type: boolean
          description: Whether the signature includes a timestamp (PAdES-B-T)
        signatureLevel:
          type: string
          enum: [B-B, B-T, UNKNOWN]
          description: PAdES signature level
        signerCN:
          type: string
          description: Common name of the signer certificate
        signingTime:
          type: string
          format: date-time
          description: Claimed signing time from signed attributes
        timestampTime:
          type: string
          format: date-time
          description: Timestamp from TSA (for PAdES-B-T)
        reasons:
          type: array
          items:
            type: string
          description: Reasons for validation result (warnings/errors)
        chainTrusted:
          type: boolean
          description: Whether the certificate chain is trusted
        certValidNow:
          type: boolean
          description: Whether the certificate is valid now

    PKCS11Slot:
      type: object
      required:
        - slotId
        - description
        - tokenPresent
      properties:
        slotId:
          type: integer
          description: PKCS#11 slot identifier
        description:
          type: string
          description: Slot description
        tokenPresent:
          type: boolean
          description: Whether a token is present in this slot
        tokenInfo:
          type: object
          properties:
            label:
              type: string
            manufacturerID:
              type: string
            model:
              type: string
            serialNumber:
              type: string

    PKCS11Certificate:
      type: object
      required:
        - label
        - subject
        - issuer
        - serialNumber
        - certificatePem
      properties:
        label:
          type: string
          description: Certificate label on the token
        subject:
          type: string
          description: Certificate subject DN
        issuer:
          type: string
          description: Certificate issuer DN
        serialNumber:
          type: string
          description: Certificate serial number
        certificatePem:
          type: string
          description: PEM-encoded certificate

  securitySchemes: {}

tags:
  - name: Health
    description: Service health and status endpoints
  - name: PDF Operations
    description: PDF generation and basic operations
  - name: PDF Signing
    description: Three-step PDF signing workflow
  - name: PDF Verification
    description: PDF signature verification
  - name: CPS Integration
    description: French CPS (Carte de Professionnel de Santé) integration
  - name: Mock HSM
    description: Mock HSM for testing and development
  - name: PKCS#11
    description: Hardware token integration via PKCS#11
  - name: Debug
    description: Debug and diagnostic endpoints (internal use)

externalDocs:
  description: Find out more about PAdES-B-T specification
  url: https://www.etsi.org/standards